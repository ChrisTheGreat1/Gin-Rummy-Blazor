@page "/"
@using BlazorGinRummy.GinRummyGame.Helpers;
@using BlazorGinRummy.GinRummyGame.Models;
@inject GinRummyGameService ginRummyGameService;

<PageTitle>Index</PageTitle>

@foreach (var msg in ginRummyGameService.GameStateMessage)
{
    <p><strong>@msg</strong></p>
}

<div class="player-hand">
    @foreach (var card in ginRummyGameService.handPlayerOne)
    {
        <img src="@($"SVG-cards/{card.FullNameString()}.svg")" @onclick="@(async () => await CardInHandImgClicked(card))">
    }
</div>


@if(ginRummyGameService.isPlayerOneTurn && ginRummyGameService.playerOnePickedUpCard != null)
{
    <img width="60" height="60" src="@($"SVG-cards/{ginRummyGameService.playerOnePickedUpCard.FullNameString()}.svg")" @onclick="@(async () => await PickedUpCardImgClicked())">
}

<p>@ginRummyGameService.HandToString(ginRummyGameService.handPlayerTwo)</p>
<br />

@if (ginRummyGameService.discardPile.Count > 0)
{
    <p>Discard Pile: @ginRummyGameService.discardPile.Last().ToString()</p>
    <img width="60" height="60" src="@($"SVG-cards/{ginRummyGameService.discardPile.Last().FullNameString()}.svg")" @onclick="@(() => DiscardPileImgClicked())">
}
<br />
<p>@ginRummyGameService.HandToString(ginRummyGameService.handPlayerOne)</p>
<br />

<br />

<button class="btn btn-primary" @onclick="@(() => DeckPickupButtonClicked())" disabled="@((!ginRummyGameService.isPlayerOneTurn)||(ginRummyGameService.isPlayerOneMakingFirstCardChoice))">Pick Up From Deck</button>

@if(!ginRummyGameService.isGameOver)
{
    @if(ginRummyGameService.isPlayerOneMakingFirstCardChoice)
    {
        <button class="btn btn-danger" @onclick="@(() => PassButtonClicked())" disabled="@(!ginRummyGameService.isPlayerOneTurn)">Pass Turn</button>
    }
    @if(ginRummyGameService.canPlayerOneKnock && !ginRummyGameService.isPlayerOneKeepPlaying)
    {
        <button class="btn btn-danger" @onclick="@(() => KnockButtonClicked())" disabled="@(!ginRummyGameService.isPlayerOneTurn)">Knock (END GAME)</button>
        <button class="btn btn-secondary" @onclick="@(() => KeepPlayingButtonClicked())" disabled="@(!ginRummyGameService.isPlayerOneTurn)">Don't Knock (KEEP PLAYING)</button>
    }
}
else
{
    // TODO: better player scoring UI and game service handling
    <br />
    <strong>ROUND SCORING</strong>
    <p>Player one round score: @ginRummyGameService.playerOneRoundScore</p>
    <p>Player two round score: @ginRummyGameService.playerTwoRoundScore</p>
}

@code {
    private void KnockButtonClicked()
    {
        if (!ginRummyGameService.isPlayerOneTurn) return;
        if (ginRummyGameService.isGameOver) return;

        ginRummyGameService.PlayerOneChoseKnock();
    }

    private void KeepPlayingButtonClicked()
    {
        if (!ginRummyGameService.isPlayerOneTurn) return;
        if (ginRummyGameService.isGameOver) return;

        ginRummyGameService.PlayerOneChoseKeepPlaying();
    }

    private void DeckPickupButtonClicked()
    {
        if (ginRummyGameService.didPlayerOnePickupCard) return;
        if (!ginRummyGameService.isPlayerOneTurn) return;
        if (ginRummyGameService.isGameOver) return;

        ginRummyGameService.PlayerOnePickedUpCardFromDeck();
    }

    private void DiscardPileImgClicked()
    {
        if (ginRummyGameService.didPlayerOnePickupCard) return;
        if (!ginRummyGameService.isPlayerOneTurn) return;
        if (ginRummyGameService.isGameOver) return;

        ginRummyGameService.PlayerOnePickedUpCardFromDiscardPile();
    }

    private async Task PickedUpCardImgClicked()
    {
        if (!ginRummyGameService.isPlayerOneTurn) return;
        if (ginRummyGameService.isGameOver) return;

        ginRummyGameService.PlayerOneChoseDiscard_PickedUpCard();
        StateHasChanged();

        if (ginRummyGameService.canPlayerOneKnock) return;

        await SimpleAgentTurn();
    }

    private async Task CardInHandImgClicked(Card card)
    {
        if (!ginRummyGameService.isPlayerOneTurn) return;
        if (!ginRummyGameService.didPlayerOnePickupCard) return;
        if (ginRummyGameService.isGameOver) return;

        ginRummyGameService.PlayerOneChoseDiscard(ginRummyGameService.handPlayerOne.IndexOf(card)); 
        StateHasChanged();

        if (ginRummyGameService.canPlayerOneKnock) return;

        await SimpleAgentTurn();
    }

    private async Task SimpleAgentTurn()
    {
        await Task.Delay(1000); // Delay so that user can better see what decision the computer player made.
        ginRummyGameService.SimpleAgentPlaysHand();
        StateHasChanged();
    }

    private void PassButtonClicked()
    {
        if (ginRummyGameService.didPlayerOnePickupCard) return;
        if (!ginRummyGameService.isPlayerOneTurn) return;
        if (ginRummyGameService.isGameOver) return;

        ginRummyGameService.PlayerOneChosePass();
    }
}

@*<GinRummyTest />*@
