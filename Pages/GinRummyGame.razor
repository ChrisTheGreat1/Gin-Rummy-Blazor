@using BlazorGinRummy.GinRummyGame.Helpers;
@using BlazorGinRummy.GinRummyGame.Models;
@inject GinRummyGameService ginRummyGameService;

<ul id="gameStateMessageBox">
    @foreach (var msg in ginRummyGameService.GameStateMessage)
    {
        <li>@msg</li>
    }
</ul>

<div id="playerTwoHand" class="player-hand">
    @foreach (var card in ginRummyGameService.HandPlayerTwo)
    {
        @if (showOpponentHand)
        {
            <img src="@($"SVG-cards/{card.FullNameString()}.svg")">
        }
        else
        {
            <img src="@($"SVG-cards/back_of_card.png")">
        }
    }
</div>

@if (ginRummyGameService.DiscardPile.Count > 0)
{
        <p id="discardPileLabel">DISCARD PILE</p>
        <img id="discardPileImg" src="@($"SVG-cards/{ginRummyGameService.DiscardPile.Last().FullNameString()}.svg")" @onclick="DiscardPileImgClicked">
}

<div id="playerOneHand" class="player-hand">
    @foreach (var card in ginRummyGameService.HandPlayerOne)
    {
        <img src="@($"SVG-cards/{card.FullNameString()}.svg")" @onclick="@(async () => await CardInHandImgClicked(card))">
    }
        @if(ginRummyGameService.IsPlayerOneTurn && ginRummyGameService.PlayerOnePickedUpCard != null)
    {
        <img src="@($"SVG-cards/{ginRummyGameService.PlayerOnePickedUpCard.FullNameString()}.svg")" @onclick="@(async () => await PickedUpCardImgClicked())">
    }
    <br />
</div>

<div class="text-center">
@if(!ginRummyGameService.IsGameOver)
{
    <div class="flex-row">
         <button class="btn btn-primary" @onclick="DeckPickupButtonClicked" disabled="@((!ginRummyGameService.IsPlayerOneTurn)||(ginRummyGameService.DidPlayerOnePickupCard))">Pick Up From Deck</button>
         <button class="btn btn-secondary" @onclick="ToggleShowOpponentHand">Show Opponent's Hand</button>

    @if(ginRummyGameService.IsPlayerOneMakingFirstCardChoice)
    {
        <button class="btn btn-danger" @onclick="PassButtonClicked" disabled="@(ginRummyGameService.DidPlayerOnePickupCard)">Pass Turn</button>
    }
    </div>

    @if(ginRummyGameService.CanPlayerOneKnock && !ginRummyGameService.IsPlayerOneStillPlaying && ginRummyGameService.IsPlayerOneTurn)
    {
        <br />
        <div class="flex-row">
            <button class="btn btn-danger" @onclick="KnockButtonClicked">Knock (END GAME)</button>
            <button class="btn btn-secondary" @onclick="KeepPlayingButtonClicked">Don't Knock (KEEP PLAYING)</button>
        </div>
    }
}
else
{
    <strong>ROUND SCORING</strong>
    <p>Player one round score: @ginRummyGameService.PlayerOneRoundScore</p>
    <p>Player two round score: @ginRummyGameService.PlayerTwoRoundScore</p>
    <button class="btn btn-primary" @onclick="PlayAgainButtonClicked">Play Again</button>
}
</div>


@code {
    private bool showOpponentHand = false;

    private void ToggleShowOpponentHand()
    {
        showOpponentHand = !showOpponentHand;
    }

    private void PlayAgainButtonClicked()
    {
        if (!ginRummyGameService.IsGameOver) return;

        ginRummyGameService.StartNewGame();
    }

    private void KnockButtonClicked()
    {
        if (!ginRummyGameService.IsPlayerOneTurn) return;
        if (ginRummyGameService.IsGameOver) return;

        ginRummyGameService.PlayerOneChoseKnock();
    }

    private void KeepPlayingButtonClicked()
    {
        if (!ginRummyGameService.IsPlayerOneTurn) return;
        if (ginRummyGameService.IsGameOver) return;

        ginRummyGameService.PlayerOneChoseKeepPlaying();
    }

    private void DeckPickupButtonClicked()
    {
        if (ginRummyGameService.DidPlayerOnePickupCard) return;
        if (!ginRummyGameService.IsPlayerOneTurn) return;
        if (ginRummyGameService.IsGameOver) return;

        ginRummyGameService.PlayerOnePickedUpCardFromDeck();
    }

    private void DiscardPileImgClicked()
    {
        if (ginRummyGameService.DidPlayerOnePickupCard) return;
        if (!ginRummyGameService.IsPlayerOneTurn) return;
        if (ginRummyGameService.IsGameOver) return;

        ginRummyGameService.PlayerOnePickedUpCardFromDiscardPile();
    }

    private void PassButtonClicked()
    {
        if (ginRummyGameService.DidPlayerOnePickupCard) return;
        if (!ginRummyGameService.IsPlayerOneTurn) return;
        if (ginRummyGameService.IsGameOver) return;

        ginRummyGameService.PlayerOneChosePass();
    }

    private async Task PickedUpCardImgClicked()
    {
        if (!ginRummyGameService.IsPlayerOneTurn) return;
        if (ginRummyGameService.IsGameOver) return;

        ginRummyGameService.PlayerOneChoseDiscard_DeckCard();
        StateHasChanged();

        if (ginRummyGameService.CanPlayerOneKnock) return;

        await SimpleAgentTurn();
    }

    private async Task CardInHandImgClicked(Card card)
    {
        if (!ginRummyGameService.DidPlayerOnePickupCard) return;
        if (!ginRummyGameService.IsPlayerOneTurn) return;
        if (ginRummyGameService.IsGameOver) return;

        ginRummyGameService.PlayerOneChoseDiscard(ginRummyGameService.HandPlayerOne.IndexOf(card)); 
        StateHasChanged();

        if (ginRummyGameService.CanPlayerOneKnock) return;

        await SimpleAgentTurn();
    }

    private async Task SimpleAgentTurn()
    {
        await Task.Delay(1000); // Delay so that user can better see what decision the computer player made.
        ginRummyGameService.SimpleAgentPlaysHand();
        StateHasChanged();
    }
}

<style>
.player-hand {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    justify-content: center;
    height: 20vh;
}

    .player-hand > img {
        margin: 1vh;
    }

#discardPileImg {
    display: block;
    margin-left: auto;
    margin-right: auto;
    margin-top: 0px;
    margin-bottom: 2vh;
    height: auto;
    width: 50%;
    max-height: 150px;
}

#discardPileLabel {
margin-bottom: 0px;
font-style: italic;
font-weight: bold;
text-align: center
}

#gameStateMessageBox {
    margin-left: auto;
    margin-right: auto;
    height: 20vh;
    width: 80vw;
    overflow: hidden; 
    overflow-y: scroll;
    border-style: double;
}
</style>
