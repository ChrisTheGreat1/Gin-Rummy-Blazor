@*@page "/ginRummyTest"*@
@using BlazorGinRummy.GinRummyGame.Helpers;
@using BlazorGinRummy.GinRummyGame.Models;
@*@using static BlazorGinRummy.GinRummyGame.GinRummyGameService;*@
@inject GinRummyGameService ginRummyGameService;

<h3>GinRummyTest</h3>

<h4>@ginRummyGameService.GameStateMessage</h4>

@*<ol>
    @foreach (var card in ginRummyGameService.GetDeck())
    {
        <li>@card.ToString()</li>
    }
</ol>*@

<p>@ginRummyGameService.HandToString(ginRummyGameService.HandPlayerTwo)</p>
<br />
<p>Discard Pile: @ginRummyGameService.DiscardPile.Last().ToString()</p>
<br />
<p>@ginRummyGameService.HandToString(ginRummyGameService.HandPlayerOne)</p>
<br />
@*
@if(@ginRummyGameService.isPlayerOneTurn)
{
    <p>Player one turn</p>
    <input type="number" @bind-value="@playerOneNumber" min="0" max="9">
    <button @onclick="SubmitPlayerOneTurn">Submit</button>
}
else
{
    StateHasChanged();
    ginRummyGameService.PlayerChoseDiscard(false, 9);
    StateHasChanged();
}

<p>@ginRummyGameService.isPlayerOneTurn</p>

<p>@playerOneNumber</p>*@

@*<button class="btn btn-primary" @onclick="RemoveCardFromDeck">Remove Card From Deck</button>*@

@*@code {
    private int playerOneNumber;

    private void SubmitPlayerOneTurn()
    {
        //if (playerOneNumber > 9 || playerOneNumber < 0) return;

        ginRummyGameService.PlayerChoseDiscard(true, playerOneNumber);
        StateHasChanged();
    }

    private void CallStateHasChanged()
    {
        StateHasChanged();
    }
}*@
